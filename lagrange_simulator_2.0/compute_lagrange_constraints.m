%function c=compute_lagrange_constraints(q,qdot,qddot,params)

%L=params(1);
L=1;
E=1; I=1; rho=1; g=1;

q_val=[1;1;1];
qdot_val=[0;1;0];
qddot_val=[1;0;0];

%phi(s),phidot(s) and phiddot(s)
phi     =@(s,q)     q(1)*s/L+q(2)*(s^2/L^2-s/L)+q(3)*(2*s^3/L^3-3*s^2/L^2+s/L);
phidot  =@(s,qdot)  qdot(1)*s/L+qdot(2)*(s^2/L^2-s/L)+qdot(3)*(2*s^3/L^3-3*s^2/L^2+s/L);
phiddot =@(s,qddot) qddot(1)*s/L+qddot(2)*(s^2/L^2-s/L)+qddot(3)*(2*s^3/L^3-3*s^2/L^2+s/L);

%derivatives of phi,phidot and phiddot with respect to q,qdot,qddot
phi_dq=@(s,q)               [s/L;...
                             (s^2/L^2-s/L);...
                             (2*s^3/L^3-3*s^2/L^2+s/L)];
phidot_dqdot=@(s,qdot)      [s/L;...
                             (s^2/L^2-s/L);...
                             (2*s^3/L^3-3*s^2/L^2+s/L)];
phiddot_dqddot=@(s,qddot)   [s/L;...
                             (s^2/L^2-s/L);...
                             (2*s^3/L^3-3*s^2/L^2+s/L)];

% various integration helper functions
% these functions need to be integrated from 0 to s to get x(s) and y(s)        
x_helper=@(s,q,qdot,qddot)          cos(phi(s,q));
y_helper=@(s,q,qdot,qddot)          sin(phi(s,q));
% this function needs to be integrated from 0 to s to get dy(s)/dq        
y_dq_helper=@(s,q,qdot,qddot)       cos(phi(s,q))*phi_dq(s,q);   
% these functions need to be integrated from 0 to s to get xdot(s) and ydot(s)        
xdot_helper=@(s,q,qdot,qddot)       -sin(phi(s,q))*phidot(s,qdot);
ydot_helper=@(s,q,qdot,qddot)       cos(phi(s,q))*phidot(s,qdot);  
% these functions need to be integrated from 0 to s to get xddot(s) and yddot(s)        
xddot_helper=@(s,q,qdot,qddot)      -cos(phi(s,q))*phidot(s,qdot)^2-sin(phi(s,q))*phiddot(s,qddot);
yddot_helper=@(s,q,qdot,qddot)      -sin(phi(s,q))*phidot(s,qdot)^2+cos(phi(s,q))*phiddot(s,qddot);
% these functions need to be integrated from 0 to s to get dxdot(s)/dq and dydot(s)/dq        
xdot_dq_helper=@(s,q,qdot,qddot)    -cos(phi(s,q))*phidot(s,qdot)*phi_dq(s,q);   
ydot_dq_helper=@(s,q,qdot,qddot)    -sin(phi(s,q))*phidot(s,qdot)*phi_dq(s,q);   
% these functions need to be integrated from 0 to s to get dxdot(s)/dqdot and dydot(s)/dqdot        
xdot_dqdot_helper=@(s,q,qdot,qddot) sin(phi(s,q))*phidot_dqdot(s,qdot);
ydot_dqdot_helper=@(s,q,qdot,qddot) cos(phi(s,q))*phidot_dqdot(s,qdot);
% these functions need to be integrated from 0 to s to get dxddot(s)/dqdot and dyddot(s)/dqdot        
xddot_dqdot_helper=@(s,q,qdot,qddot) -2*cos(phi(s,q))*phidot(s,qdot)*phidot_dqdot(s,qdot);
yddot_dqdot_helper=@(s,q,qdot,qddot) -2*sin(phi(s,q))*phidot(s,qdot)*phidot_dqdot(s,qdot);


%Derivatives of Vc with respect to q
Vc_dq=@(q,qdot,qddot) E*I/L*[q(1);...
                            q(2)/3;...
                            q(3)/5];

%Derivatives of Tkin with respect to q
Tkin_dq=@(q,qdot,qddot) ...
    rho*...
       custom_numerical_integrator_2fn(...   %first term in integral
           xdot_helper,...
           xdot_dq_helper,...
           q,qdot,qddot,L)...
    +...
    rho*... %second term in integral
        custom_numerical_integrator_2fn(...
           ydot_helper,...
           ydot_dq_helper,...
           q,qdot,qddot,L)...
     ;

%Derivatives of Tkin with respect to qdot  %xx this may not be needed -
%xx remove?
Tkin_dqdot=@(q,qdot,qddot) ...
    rho*...
       custom_numerical_integrator_2fn(...   %first term in integral
           xdot_helper,...
           xdot_dqdot_helper,...
           q,qdot,qddot,L)...
    +...
    rho*... %second term in integral
        custom_numerical_integrator_2fn(...
           ydot_helper,...
           ydot_dqdot_helper,...
           q,qdot,qddot,L)...
    ;

% d/dt (Derivatives of Tkin with respect to qdot)
% (time derivative of the derivatives of Tkin with respect to qdot)
Tkin_dqdot_dt=@(q,qdot,qddot) ...
    rho*...
       custom_numerical_integrator_2fn(...   %first term in integral
           xddot_helper,...
           xdot_dqdot_helper,...
           q,qdot,qddot,L)...
    +...
    rho*... %second term in integral
        custom_numerical_integrator_2fn(...
           xdot_helper,...
           xddot_dqdot_helper,...
           q,qdot,qddot,L)...    
    +...
    rho*... %3rd term in integral
        custom_numerical_integrator_2fn(...
           yddot_helper,...
           ydot_dqdot_helper,...
           q,qdot,qddot,L)...    
    +...
    rho*... %4th term in integral
        custom_numerical_integrator_2fn(...
           ydot_helper,...
           yddot_dqdot_helper,...
           q,qdot,qddot,L)...
    ;
       
%Derivatives of Vg with respect to q
Vg_dq=@(q,qdot,qddot) ...
    g*rho*...
    custom_numerical_integrator_1fn(...
           y_dq_helper,...
           q,qdot,qddot,L)...
    ;     

%Lagrange constraints with NEITHER external contact forces NOR actuatior
%moments (has to equal 0)

c=@(q,qdot,qddot) ...
    Tkin_dqdot_dt(q,qdot,qddot)...
    -Tkin_dq(q,qdot,qddot)...
    +Vc_dq(q,qdot,qddot)...
    +Vg_dq(q,qdot,qddot);


result=c(q_val,qdot_val,qddot_val)

%xx TODO: needs to be tested/debugged - doesnt work with gravity =0 rn
%end